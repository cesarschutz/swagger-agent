package com.example.swaggeragent.service.tool;

import com.example.swaggeragent.model.domain.DynamicTool;
import com.example.swaggeragent.model.OpenApiEndpoint;
import com.example.swaggeragent.model.OpenApiParameter;
import com.example.swaggeragent.model.OpenApiRequestBody;
import com.example.swaggeragent.model.OpenApiResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.example.swaggeragent.service.parser.OpenApiParserService;

/**
 * Servi√ßo dedicado a registrar (fazer "log") de forma detalhada as informa√ß√µes
 * sobre as ferramentas din√¢micas que foram geradas e carregadas.
 * <p>
 * O principal objetivo deste servi√ßo √© fornecer uma sa√≠da clara e estruturada no console
 * durante a inicializa√ß√£o da aplica√ß√£o. Isso ajuda os desenvolvedores a verificar
 * rapidamente quais ferramentas est√£o ativas, seus nomes, par√¢metros e estruturas
 * de dados, facilitando a depura√ß√£o e o desenvolvimento.
 */
@Service
public class ToolLoggerService {

    private static final Logger log = LoggerFactory.getLogger(ToolLoggerService.class);
    private final OpenApiParserService openApiParserService;

    /**
     * Construtor para inje√ß√£o de depend√™ncias.
     *
     * @param objectMapper         o mapper JSON para serializa√ß√£o.
     * @param openApiParserService o servi√ßo de an√°lise OpenAPI, usado para obter esquemas JSON.
     */
    public ToolLoggerService(OpenApiParserService openApiParserService) {
        this.openApiParserService = openApiParserService;
    }

    /**
     * Itera sobre uma lista de {@link DynamicTool} e registra os detalhes de cada uma.
     * <p>
     * Apresenta as informa√ß√µes em um formato leg√≠vel, com se√ß√µes para nome, descri√ß√£o,
     * entradas (par√¢metros e corpo da requisi√ß√£o) e sa√≠das (respostas poss√≠veis).
     *
     * @param tools a lista de ferramentas din√¢micas a serem registradas.
     */
    public void logTools(List<DynamicTool> tools) {
        if (tools == null || tools.isEmpty()) {
            log.info("Nenhuma ferramenta din√¢mica para registrar.");
            return;
        }

        log.info("\n====================================================================================================");
        log.info("                           üõ†Ô∏è  Ferramentas Din√¢micas Carregadas üõ†Ô∏è");
        log.info("====================================================================================================");

        for (int i = 0; i < tools.size(); i++) {
            DynamicTool tool = tools.get(i);
            OpenApiEndpoint endpoint = tool.getEndpoint();

            log.info("\n----------------------------------------- Ferramenta {} de {} --------------------------------------------", i + 1, tools.size());
            log.info("üè∑Ô∏è  Nome: {}", tool.getName());
            log.info("üìù Descri√ß√£o: {}", tool.getDescription());
            log.info("üÜî ID da Opera√ß√£o: {}", endpoint.operationId());
            log.info("üåê Projeto: {}", endpoint.projectName());
            log.info("üéØ Controller: {}", endpoint.tags() != null && !endpoint.tags().isEmpty() ? endpoint.tags().get(0) : "general");
            log.info("   {} {}{}", endpoint.method().toUpperCase(), endpoint.baseUrl(), endpoint.path());
            log.info("------------------------------------------- ENTRADAS ---------------------------------------------");

            logParameters(endpoint.parameters());
            logRequestBody(endpoint);

            log.info("------------------------------------------- SA√çDAS --------------------------------------------");
            logResponses(endpoint);

            log.info("----------------------------------------------------------------------------------------------------");
        }
        log.info("\n====================================== {} Ferramentas Carregadas com Sucesso ======================================\n", tools.size());
    }

    /**
     * Registra os par√¢metros de um endpoint, agrupando-os por localiza√ß√£o (path, query, header).
     *
     * @param parameters a lista de par√¢metros do endpoint.
     */
    private void logParameters(List<OpenApiParameter> parameters) {
        if (parameters == null || parameters.isEmpty()) {
            log.info("  Nenhum par√¢metro de entrada definido.");
            return;
        }

        // Agrupa os par√¢metros para uma exibi√ß√£o mais organizada.
        Map<String, List<OpenApiParameter>> groupedParameters = parameters.stream()
                .collect(Collectors.groupingBy(OpenApiParameter::in));

        logGroupedParameters("Path", groupedParameters.get("path"));
        logGroupedParameters("Query", groupedParameters.get("query"));
        logGroupedParameters("Header", groupedParameters.get("header"));
    }

    /**
     * Registra um grupo espec√≠fico de par√¢metros (ex: todos os par√¢metros de "Query").
     *
     * @param groupName o nome do grupo a ser exibido (ex: "Path", "Query").
     * @param params    a lista de par√¢metros pertencentes a esse grupo.
     */
    private void logGroupedParameters(String groupName, List<OpenApiParameter> params) {
        if (params != null && !params.isEmpty()) {
            log.info("  üì• Par√¢metros {}:", groupName);
            for (OpenApiParameter param : params) {
                String requiredInfo = param.required() ? "OBRIGAT√ìRIO" : "OPCIONAL";
                log.info("     - {} ({}) [{}]: {}", param.name(), param.type(), requiredInfo, param.description());

                if (param.format() != null) {
                    log.info("       Formato: {}", param.format());
                }
                if (param.defaultValue() != null) {
                    log.info("       Padr√£o: {}", param.defaultValue());
                }
                if (param.enumValues() != null && !param.enumValues().isEmpty()) {
                    log.info("       Valores Enum: {}", param.enumValues());
                }
                if (param.items() != null) {
                    log.info("       Tipo dos Items: {}", param.items().type());
                }
            }
        }
    }

    /**
     * Registra os detalhes do corpo da requisi√ß√£o (request body) de um endpoint.
     *
     * @param endpoint o endpoint da API.
     */
    private void logRequestBody(OpenApiEndpoint endpoint) {
        OpenApiRequestBody requestBody = endpoint.requestBody();
        if (requestBody != null && requestBody.content() != null && !requestBody.content().isEmpty()) {
            log.info("  üì¶ Corpo da Requisi√ß√£o:");
            log.info("     - Obrigat√≥rio: {}", requestBody.required() ? "Sim" : "N√£o");
            if (requestBody.description() != null && !requestBody.description().isBlank()) {
                log.info("     - Descri√ß√£o: {}", requestBody.description());
            }
            requestBody.content().forEach((mediaType, mediaTypeObject) -> {
                log.info("     - Tipo: `{}`", mediaType);
                if (mediaTypeObject.schema() != null) {
                    String schemaJson = openApiParserService.getSchemaAsJson(endpoint.projectName(), mediaTypeObject.schema());
                    log.info("     - Schema:");
                    // Adiciona uma indenta√ß√£o ao JSON para melhor legibilidade no log.
                    log.info("\n{}",schemaJson.indent(6));
                }
            });
        }
    }

    /**
     * Registra os detalhes das poss√≠veis respostas de um endpoint.
     *
     * @param endpoint o endpoint da API.
     */
    private void logResponses(OpenApiEndpoint endpoint) {
        Map<String, OpenApiResponse> responses = endpoint.responses();
        if (responses == null || responses.isEmpty()) {
            log.info("  Nenhuma resposta de sa√≠da definida.");
            return;
        }
        log.info("  üì§ Respostas Poss√≠veis:");
        responses.forEach((statusCode, response) -> {
            log.info("    - **`{}`**: {}", statusCode, response.description());
            if (response.content() != null) {
                response.content().forEach((mediaType, mediaTypeObject) -> {
                    if (mediaTypeObject.schema() != null) {
                        log.info("      - Schema (`{}`):", mediaType);
                        String schemaJson = openApiParserService.getSchemaAsJson(endpoint.projectName(), mediaTypeObject.schema());
                        // Adiciona uma indenta√ß√£o ao JSON para melhor legibilidade no log.
                        log.info("\n{}", schemaJson.indent(8));

                    }
                    if (mediaTypeObject.example() != null) {
                        log.info("      Exemplo: {}", mediaTypeObject.example().toString());
                    }
                });
            }
        });
    }
} 