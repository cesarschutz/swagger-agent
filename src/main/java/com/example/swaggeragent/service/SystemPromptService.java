package com.example.swaggeragent.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

/**
 * Servi√ßo respons√°vel por gerar o prompt de sistema (system prompt) para o modelo de linguagem.
 * <p>
 * O prompt de sistema √© uma instru√ß√£o fundamental que define o papel, o comportamento,
 * as regras e as capacidades do agente de IA. Este servi√ßo centraliza a l√≥gica de
 * cria√ß√£o desse prompt, garantindo que o agente se comporte de maneira consistente e segura.
 */
@Service
public class SystemPromptService {

    private static final Logger log = LoggerFactory.getLogger(SystemPromptService.class);
    
    private static final String PROMPT_FILE_PATH = "prompt.md";

    /**
     * Gera e retorna o prompt de sistema completo.
     * <p>
     * Este m√©todo l√™ o prompt de sistema do arquivo prompt.md localizado em src/main/resources.
     * Se houver algum problema na leitura do arquivo, retorna um prompt de fallback b√°sico.
     *
     * @return uma string contendo o prompt de sistema a ser usado pelo {@link org.springframework.ai.chat.client.ChatClient}.
     */
    public String generateSystemPrompt() {
        try {
            log.info("\n" +
                    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                    "‚ïë                    üìù CARREGANDO PROMPT DO SISTEMA                         ‚ïë\n" +
                    "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

            ClassPathResource resource = new ClassPathResource(PROMPT_FILE_PATH);
            String prompt = resource.getContentAsString(StandardCharsets.UTF_8);
            
            log.info("‚ïë{}" + "‚ïë", String.format("%-71s", " üìÑ Arquivo: " + PROMPT_FILE_PATH));
            log.info("‚ïë{}" + "‚ïë", String.format("%-71s", " üìè Tamanho: " + prompt.length() + " caracteres"));
            log.info("‚ïë{}" + "‚ïë", String.format("%-71s", " üìù Linhas: " + prompt.lines().count()));
            log.info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            
            return prompt;
        } catch (IOException e) {
            log.error("‚ùå Erro ao carregar o prompt do sistema do arquivo: {}. Usando prompt de fallback.", PROMPT_FILE_PATH, e);
            return getFallbackPrompt();
        }
    }

    /**
     * Conta as se√ß√µes principais do prompt para estat√≠sticas.
     */
    private int countMainSections(String prompt) {
        return (int) prompt.lines()
                .filter(line -> line.startsWith("# "))
                .count();
    }

    /**
     * Prompt de fallback caso o arquivo prompt.md n√£o possa ser carregado.
     * <p>
     * Este prompt b√°sico garante que o sistema continue funcionando mesmo se houver
     * problemas com o arquivo de configura√ß√£o principal.
     *
     * @return um prompt b√°sico de sistema
     */
    private String getFallbackPrompt() {
        return """
                Voc√™ √© um assistente de IA especializado em integra√ß√£o com APIs RESTful.
                
                üö® **REGRAS DE SEGURAN√áA**:
                - `Authorization` e `Traffic-Code` s√£o injetados automaticamente
                - **NUNCA** inclua esses campos no JSON de entrada
                - **TODAS** as opera√ß√µes que n√£o sejam GET requerem confirma√ß√£o expl√≠cita
                
                üìã **COMPORTAMENTO**:
                - Baseie respostas **EXCLUSIVAMENTE** nos dados das APIs
                - Nunca invente ou adivinhe valores
                - Use Markdown e emojis para formata√ß√£o
                - Confirme antes de executar opera√ß√µes modificadoras
                
                ‚öôÔ∏è **INTERPRETA√á√ÉO DE RESULTADOS**:
                - 2xx: ‚úÖ Sucesso
                - 4xx: ‚ö†Ô∏è Erro do cliente
                - 5xx: ‚ùå Erro do servidor
                
                üõ†Ô∏è **FERRAMENTAS UTILIZADAS**:
                Ao final de cada resposta que utilize ferramentas, adicione:
                ---
                üõ†Ô∏è *Ferramentas Utilizadas: ```nome_da_ferramenta_1```, ```nome_da_ferramenta_2```*
                """;
    }
} 